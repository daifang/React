{"version":3,"sources":["todoList/TodoInput.js","todoList/TodoShow.js","todoList/TodoList.js","serviceWorker.js","index.js"],"names":["TodoInput","upLoad","e","keyCode","target","value","alert","props","addVal","title","schedule","state","style","backgroundColor","width","height","lineHeight","color","float","marginTop","marginLeft","type","placeholder","borderRadius","fontSize","textAlign","onKeyDown","Component","TodoShow","getId","remove","id","getChecked","obj","checked","finish","data","console","log","length","map","item","index","border","listStyle","key","onChange","marginRight","onClick","number","num","div","span","this","TodoList","val","setState","Val","localStorage","setItem","JSON","stringify","getVal","parse","getItem","removeNode","splice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cddec664.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class TodoInput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            value:[]\r\n        }\r\n    }\r\n    render() {\r\n        let div = {\r\n            backgroundColor:\"rgb(39, 39, 39)\",\r\n            width:\"100%\",\r\n            height:\"50px\",\r\n            lineHeight:\"50px\"\r\n        }\r\n        let input = {\r\n            borderRadius:\"5px\",\r\n            width:\"35%\",\r\n            height:\"30px\",\r\n            fontSize:\"17px\",\r\n            textAlign:\"center\",\r\n            float:\"left\",\r\n            marginLeft:\"10%\",\r\n            marginTop:\"5px\"\r\n        }\r\n        let h1 = {\r\n            color:\"white\",\r\n            float:\"left\",\r\n            marginTop:\"0px\",\r\n            marginLeft:\"10%\"\r\n        }\r\n        return (\r\n            <div style = {div}>\r\n                <h1 style={h1}>TodoList</h1>\r\n                <input type='text' placeholder = '添加ToDo' style = {input} onKeyDown = {(e)=>{this.upLoad(e)}}/>\r\n            </div>\r\n        )\r\n    }\r\n    upLoad = e => {\r\n        if(e.keyCode === 13){\r\n            if(e.target.value === ''){\r\n                alert('信息不能为空');\r\n            }else{\r\n                this.props.addVal({title:e.target.value,schedule:false});\r\n                e.target.value = '';\r\n            }\r\n        }\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class TodoShow extends Component {\r\n    getId = (e) => {\r\n        this.props.remove(e.target.id);\r\n    }\r\n    getChecked = (e)=>{\r\n        var obj = {id:e.target.id,checked:e.target.checked};\r\n        this.props.finish(obj);\r\n        \r\n    }\r\n    data = (data,schedule)=>{\r\n        console.log(2);\r\n        console.log(data);\r\n        if(data.length === 0){\r\n            return ;\r\n        }else{\r\n            return data.map((item,index)=>{\r\n                // console.log(1);\r\n                let checkBox = {\r\n                    float:\"left\",\r\n                    width:\"20px\",\r\n                    height:\"20px\"\r\n                };\r\n                let li = {\r\n                    border:\"1px solid black\",\r\n                    textAlign:\"center\",\r\n                    fontSize:\"20px\",\r\n                    borderRadius:\"5px\",\r\n                    marginTop:\"5px\",\r\n                    listStyle:\"none\",\r\n                    backgroundColor:\"gray\",\r\n                    color:\"white\"\r\n                }   \r\n                let btn = {\r\n                    float:\"right\",\r\n                    borderRadius:\"5px\",\r\n                    border:\"none\",\r\n                    marginTop:\"3px\",\r\n                    marginRight:\"5px\",\r\n                    width:\"20px\",\r\n                    height:\"20px\"\r\n                }\r\n                // console.log(1);\r\n                if(item.schedule === schedule){\r\n                    // console.log(0);\r\n                    return (\r\n                        <li style = {li} key = {index}>\r\n                            <input type = 'checkbox' value = {item.title} style={checkBox} onChange = {(e)=>{this.getChecked(e)}} id = {index} checked = {item.schedule}/>\r\n                            <span>{item.title}</span>\r\n                            <input type=\"button\" value = \"X\" style={btn} onClick = {(e)=>{this.getId(e)}} id = {index}/>\r\n                        </li>\r\n                    )\r\n                }\r\n            })\r\n        }\r\n        \r\n    }\r\n    number = (data,schedule)=>{\r\n        let num = 0;\r\n        data.map((item)=>{\r\n            if(item.schedule === schedule){\r\n                num++;\r\n            }\r\n        });\r\n        return num;\r\n    }\r\n    render() {\r\n        let div = {\r\n            marginTop:\"15px\"\r\n        }\r\n        let box = {\r\n            width:\"40%\",\r\n            textAlign:\"center\",\r\n            marginTop:\"30px\",\r\n            marginLeft:\"25%\",\r\n        }\r\n        let span = {\r\n            float:\"right\",\r\n            width:\"20px\",\r\n            height:\"20px\",\r\n            backgroundColor:\"white\",\r\n            borderRadius:\"5px\"\r\n        }\r\n        let bottom = {\r\n            width:\"100%\",\r\n            textAlign:\"center\"\r\n        }\r\n        return (\r\n            <div style = {box}>\r\n               <div style = {div}>\r\n                   <span style = {span}>{this.number(this.props.data,false)}</span>\r\n                   <h2>正在进行</h2>\r\n                   <ul>{this.data(this.props.data,false)}</ul>\r\n               </div>\r\n               <div style = {div}>\r\n                    <span style = {span}>{this.number(this.props.data,true)}</span>\r\n                    <h2>已经完成</h2>\r\n                    <ul>{this.data(this.props.data,true)}</ul>\r\n                </div> \r\n                <div style = {bottom}><span>@2019 代天放 React-file</span></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport TodoInput from './TodoInput';\r\nimport ToDoShow from './TodoShow';\r\nexport default class TodoList extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            Val:[]\r\n        }\r\n    }\r\n    addVal = (val) => {\r\n        this.setState({\r\n            Val:[...this.state.Val,val]\r\n        },()=>{\r\n            localStorage.setItem(0,JSON.stringify(this.state.Val));\r\n        })\r\n    }\r\n\r\n    getVal = () => {\r\n        if(localStorage.length <=0){\r\n            return;\r\n        }else{\r\n            this.state.Val = JSON.parse(localStorage.getItem(0));\r\n            this.setState({\r\n                Val:this.state.Val\r\n            })\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        //获取 缓存  并渲染\r\n        this.getVal();\r\n    }\r\n    removeNode = (key)=>{\r\n        //获取key，从数组中查询并删除\r\n        this.state.Val.splice(key,1);\r\n        this.setState({\r\n            Val:this.state.Val\r\n        },()=>{\r\n            localStorage.setItem(0,JSON.stringify(this.state.Val));\r\n        });\r\n    }\r\n    finish = (obj)=>{\r\n        this.state.Val[obj.id].schedule = obj.checked;\r\n        this.setState({\r\n            Val:this.state.Val\r\n        },()=>{\r\n            localStorage.setItem(0,JSON.stringify(this.state.Val));\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div><TodoInput addVal = {this.addVal}/></div>\r\n                <div><ToDoShow data = {this.state.Val} remove = {this.removeNode} finish = {this.finish}/></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    \r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoList from './todoList/TodoList';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TodoList/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}